openapi: 3.0.1
info:
  title: Restaurant Api
  description: This is a restaurant API so you can build a restaurant app.
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
tags:
- name: user
  description: Operations about user
- name: products
  description: operation about the product
- name: orders
  description: operation about the orders
paths:
  /product:
    get:
      tags:
      - products
      summary: Get a list of products
      operationId: getProducts
      responses:
        200:
          description: ok
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
                      
    post:
      tags:
       - products
      summary: Creates a new product
      operationId: createProduct
      requestBody:
        description: The product to create
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/ProductPost'

      responses:
        200:
          description: ok
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Product'
  /product/{id}:
    parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
    get:
      tags:
      - products
      summary: Get a single product
      operationId: getProduct
      responses:
        200:
          description: ok
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Product'
        404:
          description: Product not found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/RequestError'
    put:
      tags:
      - products
      summary: Updates a single product
      operationId: updateProduct
      requestBody:
        description: the properties to change
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/ProductPost'

      responses:
        200:
          description: ok
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Product'
        404:
          description: Product not found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/RequestError'
    delete:
      tags:
      - products
      summary: Deletes a product
      operationId: deleteProduct
      responses:
        200:
          description: ok
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Product'
        404:
          description: Product not found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/RequestError'
  /order:
    get:
      tags:
      - orders
      summary: List the orders
      operationId: getOrders
      responses:
        200:
          description: ok
          content:
            'application/json':
              schema:
                type: array
                items:
                   $ref: '#/components/schemas/Order'
    post:
      tags:
      - orders
      summary: Create a new order
      operationId: postOrder
      requestBody:
        description: The order to create
        content:
          'application/json':
             schema:
               $ref: '#/components/schemas/OrderPost'
      responses:
        200:
          description: ok
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Order'
  /order/{id}:
    parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
    get:
      tags:
      - orders
      summary: Get a single order
      operationId: getOrder
      responses:
        200:
          description: ok
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Order'
        404:
          description: Order not found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/RequestError'
    put:
      tags:
      - orders
      summary: Updates an order
      operationId: putOrder
      requestBody:
        description: The order to update
        content:
          'application/json':
             schema:
               $ref: '#/components/schemas/OrderPost'
      responses:
        200:
          description: The updated order
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Order'
        404:
          description: Order not found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/RequestError'
    delete:
      tags:
      - orders
      summary: Deletes a single order
      operationId: deleteOrder
      responses:
        200:
          description: ok
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: invalid input data
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/RequestError'
        404:
          description: Order not found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/RequestError'
    
  /api/signup:
    post:
      tags:
      - user
      summary: Create user
      description: User get created
      operationId: createUser
      requestBody:
        description: User to create
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/UserPost'
        required: true
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: invalid input data
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/RequestError'
  /api/login:
    post:
      tags:
      - user
      summary: Logs in an user
      description: Logs in user
      operationId: loginUser
      requestBody:
        description: Access Token
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/UserLogin'
        required: true
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/UserToken'
        400:
          description: invalid input data
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/RequestError'
components:
  schemas:
    Product:
      type: object
      required:
      - _id
      - name
      - price
      - category
      properties:
        _id:
          type: string
          example: 61f2f7cb342e20816b468f32 
        name:
          type: string
          example: Pizza
        price:
          type: number
          example: 200
        category:
          type: string
          example: Comida
          
    ProductPost:
      type: object
      required:
      - _id
      - name
      - price
      - category
      properties:
        name:
          type: string
          example: Pizza
        price:
          type: number
          example: 200
        category:
          type: string
          example: Comida
        
    Order:
      type: object
      required:
      - userId
      - creationDate
      - deliverDate
      - complete
      - status
      - orderType
      properties:
        _id:
          type: integer
          format: int64
          example: 6202f814ae29e81c406c731c
        userId:
          type: string
          example: 6202f814ae29e81c406c732c
        creationDate:
          type: string
          format: date-time
          example: '08/02/2022 14:44'
        deliverDate:
          type: string
          format: date-time
          example: '08/02/2022 15:44'
        status:
          type: string
          description: Order Status
          enum:
          - placed
          - completed
          - delivered
        complete:
          type: boolean
          default: false
        orderType:
          type: string
          description: Order Type
          enum:
           - place
           - takeaway
           - delivery
      xml:
        name: Order
    OrderPost:
      type: object
      required:
      - userId
      - creationDate
      - deliverDate
      - complete
      - status
      - orderType
      properties:
        userId:
          type: string
          example: 6202f814ae29e81c406c732c
        creationDate:
          type: string
          format: date-time
          example: '08/02/2022 14:44'
        deliverDate:
          type: string
          format: date-time
          example: '08/02/2022 15:44'
        status:
          type: string
          description: Order Status
          enum:
          - placed
          - completed
          - delivered
        complete:
          type: boolean
          default: false
        orderType:
          type: string
          description: Order Type
          enum:
           - place
           - takeaway
           - delivery
      xml:
        name: Order
    UserPost:
      type: object
      properties:
        name:
          type: string
          example: 'Rodrigo Saez'
        email:
          type: string
          example: 'rodrigo@gmail.com'
        password:
          type: string
          example: 'asjdiajdiasj'
      xml:
        name: User
    UserLogin:
      type: object
      properties:
        email:
          type: string
          example: 'rodrigo@gmail.com'
        password:
          type: string
          example: 'asjdiajdiasj'
      xml:
        name: User
    User:
      type: object
      properties:
        _id:
          type: string
          example: 6202f814ae29e81c406c731c
        name:
          type: string
          example: 'Rodrigo Saez'
        email:
          type: string
          example: 'rodrigo@gmail.com'
        password:
          type: string
          example: 'asjdiajdiasj'
      xml:
        name: User
    UserToken:
      type: object
      properties:
        token:
          type: string
          example: 'eaahsusahudahsudhajdsiajdsi'
    RequestError:
      type: object
      properties:
        message:
          type: string
          example: 'NOT_FOUND'
        severity:
          example: 'HIGH'
          type: string
